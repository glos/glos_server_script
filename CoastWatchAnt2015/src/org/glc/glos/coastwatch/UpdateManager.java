/* Great Lakes Observing System Regional Association 
 * @Author Guan Wang
 * @Organization Great Lakes Commission
 * @Contact Pete Giencke
 *           pgiencke@glc.org
 *           734-971-9135
 *           Eisenhower Corporate Park
 *           2805 S. Industrial Hwy, Suite 100
 */
package org.glc.glos.coastwatch;

import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Logger;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;

import org.glc.glos.coastwatch.domain.Station;
import org.glc.glos.coastwatch.SqlHelper;

public final class UpdateManager {
	private Properties table=null;
	private Logger log;
	private String fileName;
	public UpdateManager(String fileName,Logger log) throws IOException
	{
		try
		{
			this.log=log;
			this.fileName=fileName;
			File file=new File(fileName);
			//Make sure the file will be there
			file.createNewFile();
			FileInputStream fis=new FileInputStream(file);
			table=new Properties();
			table.load(fis);
			fis.close();
		}
		catch(IOException ie)
		{
			if(log!=null)
			{
				log.info("Error for reading update file!");
				log.severe(ie.getMessage());
			}
			throw ie;
		}
	}
	
	public void setNewEntry(String handle,long time)
	{
		if(table!=null)
		{
			if(!table.containsKey(handle))
			{
				table.setProperty(handle, String.format("%d", time));
			}
		}
	}
	public void updateEntry(String handle,long time)
	{
		if(table!=null)
		{
			if(table.containsKey(handle))
			{
				long record=Long.MIN_VALUE;
				if((record=Long.parseLong(table.getProperty(handle)))<time)
					table.setProperty(handle, String.format("%d", time));
			}
		}
	}
	public void StoreRecords(SqlHelper sql)
	{
		if(table!=null)
		{
			try
			{
				File f=new File(fileName);
				f.delete();
				f.createNewFile();
				FileOutputStream fos=new FileOutputStream(fileName,false);
				table.store(fos, "Please DO NOT EDIT this file!");
				fos.close();
				log.info("Timestamp saved in the dat file.");
				sql.updateLastObsDate(this.table);
				log.info("Timestamp saved in the db.");
			}
			catch(FileNotFoundException fe)
			{
				if(log!=null)
				{
					log.info("Can not find the file specified in the configuration file!");
					log.severe(fe.getMessage());
				}
			}
			catch(IOException ie)
			{
				if(log!=null)
				{
					log.info("Can not save update file!");
					log.severe(ie.getMessage());
				}
			}
		}
	}
	public boolean isEntryExist(String handle)
	{
		boolean result=false;
		if(table!=null)
		{
			result=table.containsKey(handle);
		}
		return result;
	}
	public boolean IsNewData(long time,String handle)
	{
		boolean result=false;
		if(table!=null)
		{
		    try
		    {
				String tmp=null;
			    long lastUpdate=0;
			    if((tmp=table.getProperty(handle))!=null)
			    	lastUpdate=Long.parseLong(tmp);
			    if(time/100>lastUpdate/100)
			    	result=true;
		    }
		    catch(Exception e)
		    {
		    	if(log!=null)
		    	{
		    		log.info("Error for parsing update file!");
		    		log.severe(e.getMessage());
		    	}
		    }
		}
		return result;
	}
	public java.util.Set<Object> getStationHandles()
	{
		return table==null?null:table.keySet();
	}
	public long getObsLastUpdate(String handle)
	{
		if(table!=null)
	    {
			Long l=Long.parseLong(table.getProperty(handle));
			if(l!=null)
				return l.longValue();
	    }
		return -1;
	}
}
